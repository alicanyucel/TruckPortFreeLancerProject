version: '3.8'

services:
  # TruckPort Frontend
  truckport-frontend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: truckport-frontend
    ports:
      - "80:80"
      - "443:443"
    environment:
      - NODE_ENV=production
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      # - ./ssl:/etc/nginx/ssl:ro  # Uncomment for SSL
    networks:
      - truckport-network
    depends_on:
      - truckport-backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # TruckPort Backend (Mock API)
  truckport-backend:
    image: node:18-alpine
    container_name: truckport-backend
    working_dir: /app
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - DB_HOST=truckport-db
      - DB_PORT=5432
      - DB_NAME=truckport
      - DB_USER=truckport_user
      - DB_PASSWORD=secure_password
    volumes:
      - ./backend:/app
    command: >
      sh -c "
        if [ ! -f package.json ]; then
          npm init -y
          npm install express cors helmet morgan dotenv
          cat > server.js << 'EOF'
        const express = require('express');
        const cors = require('cors');
        const helmet = require('helmet');
        const morgan = require('morgan');
        
        const app = express();
        const PORT = process.env.PORT || 3000;
        
        // Middleware
        app.use(helmet());
        app.use(cors());
        app.use(morgan('combined'));
        app.use(express.json());
        
        // Mock API Routes
        app.get('/api/health', (req, res) => {
          res.json({ status: 'healthy', timestamp: new Date().toISOString() });
        });
        
        app.get('/api/lounge/reservations', (req, res) => {
          res.json([
            {
              id: 'res_001',
              userId: 'user_001',
              planType: 'premium',
              startDate: new Date(),
              endDate: new Date(Date.now() + 86400000),
              status: 'confirmed',
              totalPrice: 200,
              facilities: ['restaurant', 'wifi', 'shower'],
              createdAt: new Date()
            }
          ]);
        });
        
        app.get('/api/lounge/availability', (req, res) => {
          const { startDate, endDate } = req.query;
          const dates = [];
          for (let i = 0; i < 30; i++) {
            const date = new Date();
            date.setDate(date.getDate() + i);
            dates.push({
              date: date.toISOString().split('T')[0],
              basicSlots: Math.floor(Math.random() * 10) + 5,
              premiumSlots: Math.floor(Math.random() * 5) + 2,
              vipSlots: Math.floor(Math.random() * 3) + 1,
              totalSlots: 20
            });
          }
          res.json(dates);
        });
        
        app.post('/api/lounge/reservations', (req, res) => {
          const reservation = {
            ...req.body,
            id: 'res_' + Math.random().toString(36).substr(2, 9),
            status: 'pending',
            createdAt: new Date()
          };
          res.status(201).json(reservation);
        });
        
        app.listen(PORT, '0.0.0.0', () => {
          console.log(\`TruckPort API Server running on port \${PORT}\`);
        });
        EOF
        fi
        npm start
      "
    networks:
      - truckport-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Database
  truckport-db:
    image: postgres:15-alpine
    container_name: truckport-db
    environment:
      - POSTGRES_DB=truckport
      - POSTGRES_USER=truckport_user
      - POSTGRES_PASSWORD=secure_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - truckport-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U truckport_user -d truckport"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  truckport-redis:
    image: redis:7-alpine
    container_name: truckport-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - truckport-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: truckport-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - truckport-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana Dashboard (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: truckport-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - truckport-network
    restart: unless-stopped
    profiles:
      - monitoring

# Networks
networks:
  truckport-network:
    driver: bridge

# Volumes
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
